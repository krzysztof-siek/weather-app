{"version":3,"sources":["img/2.jpg","img/1.jpg","img/3.jpg","img/4.jpg","img/5.jpg","img/6.jpg","components/Header.js","components/Longterm.js","components/City.js","components/Result.js","components/ChangeImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APIKey","Header","state","input","err","weather","hours","minutes","seconds","day","month","year","weatherRequest","API","fetch","then","respond","json","data","setState","city","name","temp","main","max","temp_max","min","temp_min","pressure","visibility","wind_speed","wind","speed","wind_deg","deg","clouds","all","desctription","description","icon","country","sys","sunrise","sunset","props","checkWeather","catch","inputHandler","e","target","value","getTime","time","Date","getHours","getMinutes","getSeconds","getDay","getMonth","getFullYear","monthDay","getDate","prevProps","prevState","this","setInterval","className","type","placeholder","onChange","Component","Longterm","el","dt","iconSrc2","src","alt","toFixed","City","iconSrc","onClick","checkLongTermWeather","Result","lognTerm","longTermCity","list","term","length","slice","map","key","ChangeImage","weath","image3","image2","image6","image4","image5","App","image","image1","bgc","backgroundImage","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0738a5ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2.3f3986a1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.b9d13c71.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.b288b413.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.895d66ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.3a70ab55.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.a4ce229a.jpg\";","import React, {Component} from \"react\";\r\n\r\nconst APIKey = \"87f583735f7285d1017d75c8c9331a32\";\r\nclass Header extends Component {\r\n  state = {\r\n    input: \"\",\r\n    err: true,\r\n    weather: [],\r\n    hours: \"\",\r\n    minutes: \"\",\r\n    seconds: \"\",\r\n    day: \"\",\r\n    month: \"\",\r\n    year: \"\"\r\n  };\r\n\r\n  weatherRequest = () => {\r\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.input}&APPID=${APIKey}&units=metric`;\r\n    fetch(API)\r\n      .then(respond => respond.json())\r\n      .then(data => {\r\n        this.setState({\r\n          err: false,\r\n          weather: {\r\n            city: data.name,\r\n            temp: data.main.temp,\r\n            max: data.main.temp_max,\r\n            min: data.main.temp_min,\r\n            pressure: data.main.pressure,\r\n            visibility: data.visibility,\r\n            wind_speed: data.wind.speed,\r\n            wind_deg: data.wind.deg,\r\n            clouds: data.clouds.all,\r\n            main: data.weather[0].main,\r\n            desctription: data.weather[0].description,\r\n            icon: data.weather[0].icon,\r\n            country: data.sys.country,\r\n            sunrise: data.sys.sunrise,\r\n            sunset: data.sys.sunset\r\n          }\r\n        });\r\n        this.props.checkWeather(this.state);\r\n      })\r\n      .catch(err => {\r\n        this.setState({err: true, weather: []});\r\n        this.props.checkWeather(this.state);\r\n      });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.input !== this.state.input) {\r\n      this.weatherRequest();\r\n    }\r\n  }\r\n\r\n  inputHandler = e => {\r\n    this.setState({input: e.target.value});\r\n  };\r\n\r\n  getTime = () => {\r\n    let time = new Date();\r\n    let hours = time.getHours();\r\n    let minutes = time.getMinutes();\r\n    let seconds = time.getSeconds();\r\n    let day = time.getDay();\r\n    let month = time.getMonth();\r\n    let year = time.getFullYear();\r\n    let monthDay = time.getDate();\r\n    if (seconds < 10) {\r\n      seconds = \"0\" + seconds;\r\n    }\r\n    if (minutes < 10) {\r\n      minutes = \"0\" + minutes;\r\n    }\r\n    this.setState({hours, minutes, seconds, day, month, monthDay, year});\r\n  };\r\n\r\n  componentDidMount() {\r\n    setInterval(this.getTime, 1000);\r\n  }\r\n\r\n  render() {\r\n    const days = [\r\n      \"Poniedziałek\",\r\n      \"Wtorek\",\r\n      \"Środa\",\r\n      \"Czwartek\",\r\n      \"Piątek\",\r\n      \"Sobota\",\r\n      \"Niedziela\"\r\n    ];\r\n    const months = [\r\n      \"Styczeń\",\r\n      \"Luty\",\r\n      \"Marzec\",\r\n      \"Kwiecień\",\r\n      \"Maj\",\r\n      \"Czerwiec\",\r\n      \"Lipiec\",\r\n      \"Sierpień\",\r\n      \"Wrzesień\",\r\n      \"Październik\",\r\n      \"Listopad\",\r\n      \"Grudzień\"\r\n    ];\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"time\">\r\n          <p>{days[this.state.day]}</p>\r\n          <p>\r\n            {this.state.monthDay} <span> </span>\r\n            {months[this.state.month]}\r\n            {this.state.year}\r\n          </p>\r\n          <p className=\"hour\">\r\n            {this.state.hours}:{this.state.minutes}:{this.state.seconds}\r\n          </p>\r\n        </div>\r\n        <input\r\n          className=\"Header-input\"\r\n          type=\"text\"\r\n          placeholder=\"Wpisz miasto\"\r\n          onChange={this.inputHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Longterm = props => {\r\n  let t = new Date(props.el.dt * 1000);\r\n  let time = t.getHours();\r\n  let icon = props.el.weather[0].icon;\r\n  const iconSrc2 = `https://openweathermap.org/img/wn/${icon}@2x.png`;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img\">\r\n        <img src={iconSrc2} alt=\"\" />\r\n      </div>\r\n      <p>{props.el.main.temp.toFixed(0)}&#176; C</p>\r\n      <p className=\"info-time\">{time < 10 ? `0${time}:00` : `${time}:00`} </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Longterm;\r\n","import React from \"react\";\r\n\r\nconst City = props => {\r\n  const {icon, city, country, temp, pressure, wind_speed, main} = props.weather;\r\n  const iconSrc = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n  return (\r\n    <div className=\"city\">\r\n      <img src={iconSrc} alt=\"icon\" />\r\n      <h1 className=\"main\">\r\n        {city} / {country}\r\n      </h1>\r\n      <h2 className=\"temp result-text\">{temp.toFixed(0)} &#176; C</h2>\r\n      <h3 className=\"result-text\">{pressure}hPa</h3>\r\n\r\n      <h3 className=\"result-text\">wiatr: {wind_speed}m/s</h3>\r\n\r\n      <h3 className=\"result-text\">{main}</h3>\r\n      <button className=\"showLongTerm\" onClick={props.checkLongTermWeather}>\r\n        Prognoza godzinowa\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default City;\r\n","import React, {Component} from \"react\";\r\nimport Longterm from \"./Longterm\";\r\nimport City from \"./City\";\r\n\r\nclass Result extends Component {\r\n  state = {\r\n    lognTerm: []\r\n  };\r\n\r\n  checkLongTermWeather = () => {\r\n    let longTermCity = this.props.weather.city;\r\n    let APIKey = \"87f583735f7285d1017d75c8c9331a32\";\r\n    fetch(\r\n      `http://api.openweathermap.org/data/2.5/forecast?q=${longTermCity}&APPID=${APIKey}&units=metric`\r\n    )\r\n      .then(respond => respond.json())\r\n      .then(json => this.setState({lognTerm: json.list}));\r\n  };\r\n\r\n  render() {\r\n    let term = \"\";\r\n    if (this.state.lognTerm.length > 1) {\r\n      term = this.state.lognTerm\r\n        .slice(0, 10)\r\n        .map(el => <Longterm el={el} key={el.dt} />);\r\n    }\r\n\r\n    return (\r\n      <div className=\"Result\">\r\n        <City\r\n          weather={this.props.weather}\r\n          checkLongTermWeather={this.checkLongTermWeather}\r\n        />\r\n        <div className=\"Longterm\">{term}</div>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","import image2 from \"../img/2.jpg\";\r\nimport image3 from \"../img/3.jpg\";\r\nimport image4 from \"../img/4.jpg\";\r\nimport image5 from \"../img/5.jpg\";\r\nimport image6 from \"../img/6.jpg\";\r\n\r\nconst ChangeImage = weath => {\r\n  if (weath === \"Rain\") {\r\n    return image3;\r\n  } else if (weath === \"Clouds\") {\r\n    return image2;\r\n  } else if (weath === \"Clear\") {\r\n    return image6;\r\n  } else if (weath === \"Thunderstorm\") {\r\n    return image4;\r\n  } else if (weath === \"Snow\") {\r\n    return image5;\r\n  } else {\r\n    return image2;\r\n  }\r\n};\r\n\r\nexport default ChangeImage;\r\n","import React, {Component} from \"react\";\nimport Header from \"./components/Header\";\nimport Result from \"./components/Result\";\nimport image1 from \"./img/1.jpg\";\nimport \"./styles/App.css\";\nimport ChangeImage from \"./components/ChangeImage\";\n\nclass App extends Component {\n  state = {\n    err: true,\n    weather: {},\n    input: \"\",\n    image: image1\n  };\n  checkWeather = data => {\n    this.setState({input: data.input});\n\n    if (!data.err) {\n      this.setState({weather: data.weather, err: false});\n      let image = ChangeImage(this.state.weather.main);\n      this.setState({image});\n    } else {\n      this.setState({\n        weather: [],\n        err: true\n      });\n    }\n  };\n\n  render() {\n    let bgc = {backgroundImage: `url(${this.state.image})`};\n    return (\n      <div className=\"App\" style={bgc}>\n        <Header checkWeather={this.checkWeather} />\n\n        {this.state.err ? (\n          <h2>Wprowadz miasto </h2>\n        ) : (\n          <Result weather={this.state.weather} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}